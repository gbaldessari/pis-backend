type User {
  id: Int!
  username: String!
  email: String!
  password: String!	
  phone: Int!
  address: String!
  isProfessional: Boolean
}

type Job {
  id: Int!
  jobName: String!
  description: String!
  averageRate: Int!
  idCategory: Category!
  idProfessional: User!
  requestsCount: Int!
}

type Review {
  id: Int!
  comment: String!
  rate: Int!
  job: Job!
  user: User!
}

type Category {
  id: Int!
  categoryName: String!
}

type DefaultReturn {
  data: String
  message: String!
  success: Boolean!
}

type DataLoginReturn {
  token: String!
  email: String!
}

type LoginReturn {
  data: DataLoginReturn
  message: String!
  success: Boolean!
}

type CalcReturn {
  data: Int
  message: String!
  success: Boolean!
}

type MailReturn {
  message: String!
}

type ReturnPayload {
  id: Int!
  email: String!
  isAdmin: Boolean!
  iat: Int!
  exp: Int!
}

type ReturnJobs{
  data: [Job]
  message: String!
  success: Boolean!
}

type ReturnUser {
  data: User
  success: Boolean!
}

type ReturnMeets {
  data: [Meet]
  message: String!
  success: Boolean!
}

type ReturnTimes {
  data: [String]
  message: String!
  success: Boolean!
}

type ReturnReviews {
  data: [Review]
  message: String!
  success: Boolean!
}

input RegisterInput {
  username: String!
  email: String!
  password: String!	
  phone: Int!
  address: String!
  isProfessional: Boolean
}

input LoginInput {
  email: String!
  password: String!
}

input UserSettingsInput {
  userID: Int!
  receiveEmails: Boolean!
  receiveNotifications: Boolean!
}

input EditUserInput {
  username: String
  email: String
  password: String
  phone: Int
  address: String
  isProfessional: Boolean
}

input ResetPasswordInput {
  email: String!
  resetPasswordToken: String!
  password: String!
}

input AvaibleTimesInput {
  idProfessional: Int!
  date: String!
}

type Query {
  users: [User]
  user: ReturnUser!
  getUserMeets: ReturnMeets!
  totalSalesGenerated: CalcReturn!
  totalSalesMonth: CalcReturn!
  fiveFavoritesJobs: ReturnJobs!
  getAvailableTimes(avaibleTimesInput: AvaibleTimesInput!): ReturnTimes!
  getUserReviews: ReturnReviews!
  getProfessionalJobs: ReturnJobs!
}

type Mutation {
  register(registerInput: RegisterInput!): DefaultReturn!
  login(loginInput: LoginInput!): LoginReturn!
  editUser(editUserInput: EditUserInput!): DefaultReturn!
  requestPasswordReset(email: String!): DefaultReturn!
  resetPassword(resetPasswordInput: ResetPasswordInput!): DefaultReturn! 
  verifyToken: ReturnPayload!
}

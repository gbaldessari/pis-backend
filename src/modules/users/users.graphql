type User {
  id: Int!
  username: String!
  email: String!
  password: String!	
  phone: Int!
  address: String!
}

type UserSettings {
  userID: Int!
  receiveEmails: Boolean!
  receiveNotifications: Boolean!
}

type LoginReturn {
  user: User!
  token: String!
}

type RegisterReturn {
  user: User!
  message: String!
}

type ResetPasswordReturn {
  message: String!
  data: User!
}

type MailReturn {
  message: String!
}

input UserInput {
  id: Int!
  username: String!
  email: String!
  password: String!	
  phone: Int!
  address: String!
}

input RegisterInput {
  username: String!
  email: String!
  password: String!	
  phone: Int!
  address: String!
}

input LoginInput {
  email: String!
  password: String!
}

input UserSettingsInput {
  userID: Int!
  receiveEmails: Boolean!
  receiveNotifications: Boolean!
}

input EditUserInput {
  username: String
  email: String
  password: String
  phone: Int
  address: String
}

input ResetPasswordInput {
  email: String!
  reset_token: String!
  password: String!
}

type Query {
  users: [User]!
  user(email: String!): User
  sendUserRecovery(user: UserInput!): MailReturn!
}

type Mutation {
  register(registerInput: RegisterInput!): RegisterReturn!
  login(loginInput: LoginInput!): LoginReturn!
  createUserSettings(userSettingsInput: UserSettingsInput!): UserSettings!
  editUser(email: String!, editUserInput: EditUserInput!): User!
  requestPasswordReset(email: String!): ResetPasswordReturn!
  resetPassword(resetPasswordInput: ResetPasswordInput!): ResetPasswordReturn! 
}

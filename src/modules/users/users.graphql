type User {
  id: Int!
  username: String!
  email: String!
  password: String!	
  phone: Int!
  address: String!
  isProfessional: Boolean
}

type Job {
  id: Int!
  jobName: String!
  description: String!
  averageRate: Int!
  idCategory: Category!
  idProfessional: User!
  requestsCount: Int!
}

type DefaultReturn {
  data: String
  message: String!
  success: Boolean!
}

type DataLoginReturn {
  token: String!
  email: String!
}

type LoginReturn {
  data: DataLoginReturn
  message: String!
  success: Boolean!
}

type CalcReturn {
  data: Int
  message: String!
  success: Boolean!
}

type MailReturn {
  message: String!
}

type ReturnPayload {
  id: Int!
  email: String!
  isAdmin: Boolean!
  iat: Int!
  exp: Int!
}

type ReturnFiveJobs{
  data: [Job]!
  message: String!
  success: Boolean!

}

input RegisterInput {
  username: String!
  email: String!
  password: String!	
  phone: Int!
  address: String!
  isProfessional: Boolean
}

input LoginInput {
  email: String!
  password: String!
}

input UserSettingsInput {
  userID: Int!
  receiveEmails: Boolean!
  receiveNotifications: Boolean!
}

input EditUserInput {
  username: String
  email: String
  password: String
  phone: Int
  address: String
  isProfessional: Boolean
}

input ResetPasswordInput {
  email: String!
  resetPasswordToken: String!
  password: String!
}

type Query {
  users: [User]!
  user(): User!
  getUserMeets: [Meet]!
  totalSalesGenerated: CalcReturn!
  totalSalesMonth: CalcReturn!
  fiveFavoritesJobs: ReturnFiveJobs!
  getAvailableTimes(date: String!): [String]!
}

type Mutation {
  register(registerInput: RegisterInput!): DefaultReturn!
  login(loginInput: LoginInput!): LoginReturn!
  editUser(editUserInput: EditUserInput!): DefaultReturn!
  requestPasswordReset(email: String!): DefaultReturn!
  resetPassword(resetPasswordInput: ResetPasswordInput!): DefaultReturn! 
  verifyToken: ReturnPayload!
}
